import { GraphModel } from "@tensorflow/tfjs-converter";
import { Tensor } from "@tensorflow/tfjs-core";
import { Box } from "./box";
import type { Tensor1D, Tensor2D, Tensor3D, Tensor4D } from "@tensorflow/tfjs-core";
export type FacePrediction = {
    box: Box;
    landmarks: Tensor2D;
    probability: Tensor1D;
    anchor: Tensor2D | [number, number];
};
export interface NormalizedFace {
    topLeft: [number, number] | Tensor1D;
    bottomRight: [number, number] | Tensor1D;
    landmarks?: number[][] | Tensor2D;
    probability?: number | Tensor1D;
}
export declare class FaceLandmarksDetection {
    private faceModel;
    private width;
    private height;
    private maxFaces;
    private anchors;
    private anchorsData;
    private inputSize;
    private inputSizeData;
    private iouThreshold;
    private scoreThreshold;
    constructor(model: GraphModel, width: number, height: number, maxFaces: number, iouThreshold: number, scoreThreshold: number);
    getBoundingBoxes(inputImage: Tensor4D, returnTensors: boolean, annotateBoxes?: boolean): Promise<{
        boxes: Array<FacePrediction | Box>;
        scaleFactor: Tensor | [number, number];
    }>;
    estimateFaces(input: Tensor3D | ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement, returnTensors?: boolean, flipHorizontal?: boolean, annotateBoxes?: boolean): Promise<NormalizedFace[]>;
}
export default FaceLandmarksDetection;
